// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: "$rootProject.projectDir/deploy_versioning.gradle"

buildscript {

    ext {

        kotlin_version = '1.2.71'
        gradle_version = '3.1.4'

        publish_version_bintray = '1.8.4'
        publish_version_android_maven = '2.1'
        publish_version_dokka = '0.9.17'

        sdk_version_compile = 28
        sdk_version_min = 15
        sdk_version_target = 28

        android_version_support = '28.0.0'
        android_version_ktx = '0.3'
        android_version_pagination = '1.0.1'

        lib_version_fastscroll = '0.2.5'
        lib_version_rxjava2 = '2.1.16'
        lib_version_rxkotlin = '2.2.0'
        lib_version_rxandroid = '2.0.2'

        test_version_junit = '4.12'
        test_version_robolectric = '3.8'
        test_version_mockito = '2.20.0'

        version_code = 1
        version_name = "1.0.0"
    }

    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:3.2.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$publish_version_bintray"
        classpath "com.github.dcendents:android-maven-gradle-plugin:$publish_version_android_maven"
        classpath "org.jetbrains.dokka:dokka-android-gradle-plugin:$publish_version_dokka"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$publish_version_dokka"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url  "https://dl.bintray.com/iojjj/kotlin-bootstrap" }
    }
}

project.afterEvaluate {
    if (!file("version.properties").exists()) {
        generateProps()
    }
    println "Lib version: ${getLibVersion()}"
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task generateVersionProps() {
    doFirst {
        generateProps()
    }
}

task printVersion() {
    doFirst {
        println getVersion()
    }
}

task setVersionType() {
    doFirst {
        def versionProps = getVersionProps()
        def type = getProperty("versionType") ?: ""
        versionProps["version.type"] = type
        saveVersionProps(versionProps)
    }
}

task incrementBuild() {
    doFirst {
        def versionProps = getVersionProps()
        incrementProp(versionProps, "version.build")
        saveVersionProps(versionProps)
    }
}

task incrementMinor() {
    doFirst {
        def versionProps = getVersionProps()
        incrementProp(versionProps, "version.minor")
        versionProps["version.build"] = "0"
        saveVersionProps(versionProps)
    }
}

task incrementMajor() {
    doFirst {
        def versionProps = getVersionProps()
        incrementProp(versionProps, "version.major")
        versionProps["version.minor"] = "0"
        versionProps["version.build"] = "0"
        saveVersionProps(versionProps)
    }
}

task incrementTypeBuild() {
    doFirst {
        def versionProps = getVersionProps()
        incrementProp(versionProps, "version.type.build")
        saveVersionProps(versionProps)
    }
}

private static String incrementProp(Properties versionProps, String propName) {
    def newValue = Integer.parseInt(versionProps[propName] ?: "0") + 1
    versionProps[propName] = String.valueOf(newValue)
}